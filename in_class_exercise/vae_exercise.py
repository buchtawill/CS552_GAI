# Generated by ChatGPT

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# Define the encoder
class Encoder(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(Encoder, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc_mu = nn.Linear(hidden_dim, latent_dim)
        self.fc_logvar = nn.Linear(hidden_dim, latent_dim)
        self.relu = nn.ReLU()

    def forward(self, x):
        h = self.relu(self.fc1(x))
        mu = self.fc_mu(h)
        logvar = self.fc_logvar(h)
        return mu, logvar


# Define the decoder
class Decoder(nn.Module):
    def __init__(self, latent_dim, hidden_dim, output_dim):
        super(Decoder, self).__init__()
        self.fc1 = nn.Linear(latent_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()

    def forward(self, z):
        h = self.relu(self.fc1(z))
        x_recon = self.sigmoid(self.fc2(h))
        return x_recon


# Define the VAE
class VAE(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(VAE, self).__init__()
        self.encoder = Encoder(input_dim, hidden_dim, latent_dim)
        self.decoder = Decoder(latent_dim, hidden_dim, input_dim)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def forward(self, x):
        mu, logvar = self.encoder(x)
        z = self.reparameterize(mu, logvar)
        x_recon = self.decoder(z)
        return x_recon, mu, logvar


# Loss function
def loss_function(x_recon, x, mu, logvar):
    recon_loss = nn.functional.binary_cross_entropy(x_recon, x, reduction="sum")
    kl_divergence = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())
    return recon_loss + kl_divergence
    # return recon_loss - kl_divergence


# Training setup
def train_vae(vae, dataloader, optimizer, epochs=10, device="cpu"):
    vae.train()
    for epoch in range(epochs):
        total_loss = 0
        for batch, _ in dataloader:
            batch = batch.view(batch.size(0), -1).to(device)
            optimizer.zero_grad()
            x_recon, mu, logvar = vae(batch)
            loss = loss_function(x_recon, batch, mu, logvar)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        print(f"Epoch {epoch + 1}, Loss: {total_loss / len(dataloader.dataset):.4f}")


# Main script
def main():
    # Hyperparameters
    batch_size = 128
    input_dim = 28 * 28
    hidden_dim = 400
    latent_dim = 20
    learning_rate = 1e-3
    epochs = 10

    # Data loading
    transform = transforms.ToTensor()
    train_dataset = datasets.MNIST(root="./data", train=True, transform=transform, download=True)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

    # Model, optimizer, and device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    vae = VAE(input_dim, hidden_dim, latent_dim).to(device)
    optimizer = optim.Adam(vae.parameters(), lr=learning_rate)

    # Training
    train_vae(vae, train_loader, optimizer, epochs, device)


if __name__ == "__main__":
    main()
    
    '''
    1. What / where are the bugs in the code? 
        - latent_dim//2 lines (line 14 and 15)
        - Line 48, std not variance
        - only encoder parameters are optimized
        - 
    2. Which lines of the code are responsible for implementing expectation?
        - 61?
    3. Which lines implement KL divergence?
        - 62
    4. What is dimension d of latent variable z? --> 
        - latent_dim, which is 20
    5. How many NN linear layers are traversed in the encoder to process each x to produce the mean of P(z | x)?
        - 2
    6. In terms of the VAE definition from the slides, what probability distribution does VAE.reparameterize() sample from?
        - standard normal
    
    '''
